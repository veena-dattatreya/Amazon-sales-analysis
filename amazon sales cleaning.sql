select * from category;
select * from customers;
select * from inventory;
select * from order_items;
select * from orders;
select * from payments;
select * from products;
select * from sellers;
select * from shipping;

select * from shipping
where return_date is not null;-- returned

--6747
select * from payments
where order_id=6747; -- refunded

-- ---------------------------------------
-- business problems
--advanced sql
-- --------------------------------------------


/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

ALTER TABLE order_items
ADD COLUMN total_sale FLOAT;


SELECT * FROM order_items;

UPDATE order_items
SET total_sale = quantity * price_per_unit;
SELECT * FROM order_items;


SELECT * FROM order_items
ORDER BY quantity DESC;

SELECT 
	oi.product_id,
	p.product_name,
	SUM(oi.quantity*oi.price_per_unit) as total_sale,
	sum(oi.quantity)  as total_orders
FROM orders as o
JOIN
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON p.product_id = oi.product_id
GROUP BY 1, 2
ORDER BY 3 DESC
limit 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

--category id,cat name,rev,total contribution
--join category,product,order items
--group by cat id and cat name total rev from oi

select c.category_id,c.category_name,sum(quantity*price_per_unit) as revenue,
sum(quantity*price_per_unit)/(select sum(quantity*price_per_unit) from order_items) * 100 
as contribution
from category c
join products p
on c.category_id=p.category_id
join order_items oi
on oi.product_id=p.product_id
group by c.category_id,c.category_name
order by 3 desc;

--or
SELECT 
	p.category_id,
	c.category_name,
	SUM(oi.total_sale) as total_sale,
	SUM(oi.total_sale)/
					(SELECT SUM(total_sale) FROM order_items) 
					* 100
	as contribution
FROM order_items as oi
JOIN
products as p
ON p.product_id = oi.product_id
LEFT JOIN category as c
ON c.category_id = p.category_id
GROUP BY 1, 2
ORDER BY 3 DESC;

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

select 
     c.customer_id,
	 CONCAT(c.first_name,' ',c.last_name),
	 SUM(total_sale)/COUNT(o.order_id) as avg_order_value,
	 COUNT(o.order_id)
FROM orders as o
JOIN
order_items as oi
ON oi.order_id = o.order_id
JOIN customers c
on c.customer_id=o.customer_id
GROUP BY 1,2
HAVING COUNT(o.order_id)>5

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

-- last 1 year data 
-- each month -- their sale and their prev month sale
-- window lag

select year,month,total_sale as current_sale,
LAG(total_sale,1) over(order by year,month) as prev_sale
FROM
(select 
EXTRACT(MONTH FROM o.order_date) as month,
EXTRACT(YEAR FROM o.order_date) as year,
ROUND(sum(oi.total_sale)::numeric,2) as total_sale
FROM orders o
JOIN order_items oi
on o.order_id=oi.order_id
WHERE order_date>=current_date-interval'1 year'
GROUP BY 1,2
ORDER BY 2,1 ASC) as t1;


/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

select * from customers 
WHERE customer_id not in (select DISTINCT customer_id from orders)

-- or
select c.first_name,c.last_name, c.state from customers c
full join orders o on
c.customer_id=o.customer_id
where o.order_id is null

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*
/


